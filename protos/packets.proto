import "google/protobuf/descriptor.proto";

import "entities.proto";
import "geometry.proto";
import "items.proto";
import "realm.proto";

message Packet {
  enum Type {
    HELLO = 0;
    ERROR = 1;
    CHAT = 2;
    MOVE = 3;
    // AVATAR = 4;
    REALM = 5;
    REGION = 6;
    // VIEWPORT = 7;
    ENTITY = 8;
    STOP_MOVE = 9;
    TELEPORT = 10;
    STATUS = 11;
    PICK_UP = 12;
    DESPAWN_ENTITY = 13;
    INVENTORY = 14;
    ECHO = 15;
    TURN = 16;
    // ATTACK = 17;
    // DAMAGE = 18;
    DEATH = 19;
    WHOAMI = 20;
    SIGHT = 21;
    UNSIGHT = 22;
    ENTER = 23;
    EXIT = 24;
    DISCARD = 25;
    MODIFY_EQUIPMENT = 26;
  }

  required Type type = 1;
  optional uint32 origin = 2;
  required bytes payload = 3;
}

extend google.protobuf.MessageOptions {
  optional Packet.Type packet_type = 50000;
}

message HelloPacket {
  // Sent from the client to the server to authenticate.
  //
  // Direction: Client -> Server
  option (packet_type) = HELLO;

  required bytes token = 1;
}

message ErrorPacket {
  // Sent to the client when an error occurs.
  //
  // Direction: Server -> Client
  option (packet_type) = ERROR;

  required string text = 1;
}

message ChatPacket {
  // Sent by the client to relay a chat message; sent by the server to notify
  // the client of a received chat message.
  //
  // Direction: Server <-> Client
  option (packet_type) = CHAT;

  required string target = 1;
  optional string actor_name = 2;
  required string text = 3;
}

message MovePacket {
  // Sent by the client to perform a move; sent by the server to notify the
  // client of a performed move.
  //
  // Direction: Server <-> Client
  option (packet_type) = MOVE;

  required Vector3 location = 1;
}

message RealmPacket {
  // Sent by the server to begin populating the client's realm information.
  //
  // Direction: Server -> Client
  option (packet_type) = REALM;

  required uint32 id = 1;
  required Realm realm = 2;
}

message RegionPacket {
  // Sent by the server to populate the client's realm regions.
  //
  // Direction: Server -> Client
  option (packet_type) = REGION;

  required Vector2 location = 1;
  required uint32 realm_id = 2;
  required Region region = 3;
}

message EntityPacket {
  // Sent by the server to populate the client's realm entities.
  //
  // Direction: Server -> Client
  option (packet_type) = ENTITY;

  required Entity entity = 1;
}

message StopMovePacket {
  // Sent by the client to indicate it has stopped moving; sent by the server to
  // notify a client to stop move animations.
  //
  // Direction: Server <-> Client
  option (packet_type) = STOP_MOVE;
}

message TeleportPacket {
  // Sent by the server to force a client to reposition itself.
  //
  // Direction: Server -> Client
  option (packet_type) = TELEPORT;

  required Vector3 location = 1;
  required Entity.Direction direction = 2;
}

message StatusPacket {
  // Sent by the server to indicate a change in status of a player.
  //
  // Direction: Server -> Client
  option (packet_type) = STATUS;

  required bool online = 1;
}

message PickUpPacket {
  // Sent by the client to pick up an item at the origin's current location.
  //
  // Direction: Client -> Server
  option (packet_type) = PICK_UP;

  required uint32 drop_id = 1;
}

message DespawnEntityPacket {
  // Sent by the server to despawn the origin from the world. This does not
  // imply the origin has died, only that it should no longer be visible in the
  // viewport.
  //
  // Direction: Server -> Client
  option (packet_type) = DESPAWN_ENTITY;
}

message InventoryPacket {
  // Sent by the server to indicate an item has been collected into the player's
  // inventory.
  //
  // Direction: Server -> Client
  option (packet_type) = INVENTORY;

  required Item item = 1;
}

message EchoPacket {
  // Sent by the client to determine how much latency there is to the server;
  // sent by the server in response to the client.
  //
  // Direction: Server <-> Client
  option (packet_type) = ECHO;

  required string payload = 1;
}

message TurnPacket {
  // Sent by the client to indicate that it has turned; sent by the server to
  // indicate a client has turned.
  //
  // Direction: Server <-> Client
  option (packet_type) = TURN;

  required Entity.Direction direction = 1;
}

message DeathPacket {
  // Sent by the server to indicate an entity has died.
  //
  // Direction: Server -> Client
  option (packet_type) = DEATH;
}

message WhoamiPacket {
  // Sent by the client to request its entity from the server. Generally only
  // useful for the NPC server which can authenticate as any NPC.
  //
  // Direction: Client -> Server
  option (packet_type) = WHOAMI;
}

message SightPacket {
  // Sent by the client to request sight of a given region.
  //
  // Direction: Client -> Server
  option (packet_type) = SIGHT;

  required Vector2 location = 1;
}

message UnsightPacket {
  // Sent by the client to request the removal of sight from a given region.
  //
  // Direction: Client -> Server
  option (packet_type) = UNSIGHT;

  required Vector2 location = 1;
}

message EnterPacket {
  // Sent by the server when an entity first enters a region (i.e. its bounding
  // box just intersected the region).
  //
  // Direction: Server -> Client
  option (packet_type) = ENTER;

  required Vector2 location = 1;

  // This field is advisory -- the client may choose to integrate it into its
  // list of entities, if it doesn't have the entity.
  required Entity entity = 2;
}

message ExitPacket {
  // Sent by the server when an entity completely exits a region (i.e. its
  // bounding box no longer intersects the region).
  //
  // Direction: Server -> Client
  option (packet_type) = EXIT;

  required Vector2 location = 1;
}

message DiscardPacket {
  // Sent by the server when the client discards an item from inventory; sent by
  // the client to indicate to the server an item has been discarded. To discard
  // an equipped item, the client must modify its equipment first, then discard
  // the resulting item.
  //
  // Direction: Server <-> Client
  option (packet_type) = DISCARD;

  required uint32 item_id = 1;
}

message ModifyEquipmentPacket {
  // Sent by the server when the client modifies a piece of equipment; sent by
  // the client to request modification of equipment. If an actor attempts to
  // modify equipment into an already filled equipment slot, the request is
  // rejected with an error.
  //
  // Direction: Server <-> Client
  option (packet_type) = MODIFY_EQUIPMENT;

  required Equipment.Slot slot = 1;
  optional uint32 item_id = 2;
}
